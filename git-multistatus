#!/usr/bin/env python

import subprocess
import sys

if len(sys.argv) > 1:
    upstreams = sys.argv[1:]
else:
    print "Must supply upstream branch as arg"
    sys.exit(1)

merged = []

def commit_distance(trunk, leaf):
    return int(subprocess.check_output(["git", "rev-list", leaf, "^" + trunk, "--count"]).strip())

for line in subprocess.check_output(["git", "branch"]).split("\n"):
    tag = line.strip()
    if not tag:
        continue
    head = False
    ref = tag
    if ref[:2] == "* ":
        head = True
        ref = tag[2:]
        tag ="*" + ref

    # find the closest upstream source branch for our ref
    if len(upstreams) > 1:
        upstreams.sort(key=lambda x: commit_distance(x, ref))
    upstream = upstreams[0]
    behind = commit_distance(ref, upstream)
    tag = "%s(%d)" % (tag, behind)
        
    if subprocess.call(["git", "merge-base", "--is-ancestor", ref, upstream]) == 0:
        merged.append(tag)
    else:
        print "==>", tag
        print subprocess.check_output(["git", "log", "%s..%s" % (upstream, ref), "--reverse", "--format=tformat:  %h %s"])

if merged:
    print "Merged:", " ".join(merged)
